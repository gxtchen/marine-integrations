"""
@package ${driver_module}
@file ${file}
@author ${author}
@brief Driver for the ${driver_name}
Release notes:

${release_notes}
"""

__author__ = '${author}'
__license__ = 'Apache 2.0'

import string

from mi.core.log import get_logger ; log = get_logger()

from mi.dataset.dataset_driver import SimpleDataSetDriver
from mi.dataset.parser.${full_instrument_lower} import ${full_instrument_first}Parser, ${full_instrument_first}ParserDataParticle

class ${constructor}(SimpleDataSetDriver):
    
    @classmethod
    def stream_config(cls):
        return [${full_instrument_first}ParserDataParticle.type()]

    def _build_parser(self, parser_state, infile):
        """
        Build and return the parser
        """
        config = self._parser_config
        config.update({
            'particle_module': 'mi.dataset.parser.${full_instrument_lower}',
            'particle_class': '${full_instrument_first}ParserDataParticle'
        })
        log.debug("My Config: %s", config)
        self._parser = ${full_instrument_first}Parser(
            config,
            parser_state,
            infile,
            self._save_parser_state,
            self._data_callback
        )
        return self._parser

    def _build_harvester(self, harvester_state):
        """
        Build and return the harvester
        """
        # *** Replace the following with harvester initialization ***
        self._harvester = None     
        return self._harvester
